<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

<modelVersion>4.0.0</modelVersion>
<artifactId>touchcoreview</artifactId>
<groupId>ca.mcgill.sel</groupId>
<packaging>jar</packaging>
<version>1.0.0-SNAPSHOT</version>

<!-- A custom repository where we store everything EMF does not offer on the official repos-->
<repositories>
    <repository>
        <id>scorelabs</id>
        <url>https://www.cs.mcgill.ca/~mschie3/maven2/</url>
    </repository>
</repositories>

<dependencies>
<!-- TODO: Make sure UI is actually split into MT4J-dependent trash and proper controller classes (e.g. relevant for backend build) -->
        <dependency>
                <groupId>friend.of.mcgillsel</groupId>
                <artifactId>mt4j</artifactId>
                <version>mspatch-1.0</version>
        </dependency>

        <dependency>
                <groupId>ca.mcgill.sel</groupId>
                <artifactId>touchcorecontroller</artifactId>
                <version>1.0.0-SNAPSHOT</version>
        </dependency>

	<dependency>
                <groupId>ca.mcgill.sel</groupId>
                <artifactId>restifcontroller</artifactId>
                <version>1.0.0-SNAPSHOT</version>
	</dependency>

        <dependency>
                <groupId>ca.mcgill.sel</groupId>
                <artifactId>environmentmodellanguage</artifactId>
                <version>1.0.0-SNAPSHOT</version>
        </dependency>

        <dependency>
                <groupId>ca.mcgill.sel</groupId>
                <artifactId>operationmodellanguage</artifactId>
                <version>1.0.0-SNAPSHOT</version>
        </dependency>

        <dependency>
                <groupId>ca.mcgill.sel</groupId>
                <artifactId>usecaseslanguage</artifactId>
                <version>1.0.0-SNAPSHOT</version>
        </dependency>

        <dependency>
                <groupId>ca.mcgill.sel</groupId>
                <artifactId>classdiagramcontroller</artifactId>
                <version>1.0.0-SNAPSHOT</version>
        </dependency>

        <dependency>
                <groupId>friend.of.mcgillsel</groupId>
                <artifactId>abegotree</artifactId>
                <version>1.0.0-SNAPSHOT</version>
        </dependency>
	        <dependency>
                <groupId>ca.mcgill.sel</groupId>
                <artifactId>ramexpressions</artifactId>
                <version>1.0.0-SNAPSHOT</version>
        </dependency>
        <dependency>
                <groupId>ca.mcgill.sel</groupId>
                <artifactId>ramedit</artifactId>
                <version>1.0.0-SNAPSHOT</version>
        </dependency>

	<dependency>
	    <groupId>org.jogamp.jogl</groupId>
	    <artifactId>jogl-all-main</artifactId>
	    <version>${opengl.version}</version>
	</dependency>

	<dependency>
	    <groupId>org.jogamp.gluegen</groupId>
	    <artifactId>gluegen-rt-main</artifactId>
	    <version>${opengl.version}</version>
	</dependency>

	<dependency>
	    <groupId>org.tinyjee.jgraphx</groupId>
	    <artifactId>jgraphx</artifactId>
	    <version>3.4.1.3</version>
	</dependency>
</dependencies>

<properties>
    <!--        Compiles, finds jars at runtime, but complains about missing library methods at runtime. Possibly due to MT4J.-->
    <opengl.version>2.1.5</opengl.version>
    <!--        <opengl.version>2.1.5-01</opengl.version>-->
    <!--        <opengl.version>2.1.5</opengl.version>-->
    <!--        <opengl.version>2.1.4</opengl.version>-->

     <maven.compiler.source>1.8</maven.compiler.source>
     <maven.compiler.target>1.8</maven.compiler.target>
    <skip.assembly>false</skip.assembly>
  <src.dir>src</src.dir>
<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
</properties>

<build>
  <sourceDirectory>${src.dir}</sourceDirectory>
    <plugins>
        <plugin>
            <artifactId>maven-assembly-plugin</artifactId>
            <version>2.6</version>
            <configuration>
                            <archive>
                                <manifest>
                                    <mainClass>ca.mcgill.sel.ram.ui.TouchCORE</mainClass>
                                </manifest>
                            </archive>
                <descriptorRefs>
                    <descriptorRef>jar-with-dependencies</descriptorRef>
                </descriptorRefs>
                <skipAssembly>${skip.assembly}</skipAssembly>
            </configuration>
            <executions>
                <execution>
                    <id>make-assembly</id>
                    <phase>package</phase>
                    <goals>
                        <goal>single</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>

	<!-- copy the lib folder into the target folder, so it resides next to the final jar.-->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-resources-plugin</artifactId>
            <version>2.5</version>
            <executions>
                <execution>
                    <id>custom-resources</id>
                    <phase>process-resources</phase>
                    <goals>
                        <goal>copy-resources</goal>
                    </goals>
                    <configuration>
                        <outputDirectory>${project.build.directory}</outputDirectory>
                        <resources>                                        
                            <resource>
                                <targetPath>${basedir}/target/lib</targetPath>
                                <directory>lib</directory>
                                <filtering>true</filtering>
                            </resource>             
			</resources>
                        <encoding>UTF-8</encoding>
                    </configuration>            
                </execution>
            </executions>
        </plugin>
    </plugins>

  <!--	inlcude the lib folder into the jar. Probably obsolete until code is changed to search within jar. -->
  <resources>
 <resource>
  <directory>.</directory>
  <includes>
    <include>lib/**/*.*</include>
  </includes>
 </resource>
</resources>
</build>
</project>
